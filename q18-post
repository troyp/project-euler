A* solution in Python (the Path class and Astar function are general enough to be used for other problems - the problem-specific logic is in the helper functions).
[code=]

a = [[                               75                               ],
     [                             95, 64                             ],
     [                           17, 47, 82                           ],
     [                         18, 35, 87, 10                         ],
     [                       20,  4, 82, 47, 65                       ],
     [                     19,  1, 23, 75,  3, 34                     ],
     [                   88,  2, 77, 73,  7, 63, 67                   ],
     [                 99, 65,  4, 28,  6, 16, 70, 92                 ],
     [               41, 41, 26, 56, 83, 40, 80, 70, 33               ],
     [             41, 48, 72, 33, 47, 32, 37, 16, 94, 29             ],
     [           53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14           ],
     [         70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57         ],
     [       91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48       ],
     [     63, 66,  4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31     ],
     [   4, 62, 98, 27, 23,  9, 70, 98, 73, 93, 38, 53, 60,  4,  23   ]]

# we move down a row each step, either left (ith->ith) or right (ith->i+1st)
# using A* with heuristic: sum the row maxima for remaining rows
# clearly, heuristic is optimistic.

N = 15

class Path(list):
    def __init__(self, *args):
        super(Path, self).__init__(*args)
        self.val = None
    def __add__(self, other):
        res = Path(self)
        list.__iadd__(res, other)
        res.val = self.val + sum((a[i][j] for (i,j) in other))
        return res
    def __str__(self):
        return "Path: %s\nValue: %d"%(list.__str__(self), self.val)

start = Path([(0,0)])
start.val = 75

def Astar(remove_choice, actions, goal, frontier=[start], explored=[]):
    while frontier:
        path = remove_choice(frontier)
        s = path[-1]
        explored.append(s)
        if goal(s):
            return path
        for act in actions(s):
            result = path + [act]
            if not result[-1] in explored:
                frontier.append(result)
    else:
        return None

rowmaximum = [max(row) for row in a]
def h(node):
    return sum((rowmaximum[i] for i in xrange(node[0]+1, N)))
def goal(x):   # return True if goal node
    return x[0] == N-1
def actions(x):    # return iterable containing possible next nodes
    if x[0] == N-1:
        return []
    return [(x[0]+1,x[1]), (x[0]+1,x[1]+1)]
def remove_choice(frontier):
    maxval = -1; maxpath = None
    for path in frontier:
        max_tot_path_val = path.val + h(path[-1])
        if max_tot_path_val > maxval:
            maxval = max_tot_path_val
            maxpath = path
    frontier.remove(maxpath)
    return maxpath

print Astar(remove_choice, actions, goal)
[/code]

edit: so I wrote another solution taking the specific structure of the problem into account. I knew A* wasn't optimal, but I figured I'd do it as an exercise and think about a more specific solution later. I'm a bit embarrassed at how simple this is, though.
[code=]

datafile = open("triangle.txt")
text = datafile.readlines()
a = [[int(num) for num in line.split()] for line in text]
N = len(a)

for row in xrange(N-2,-1,-1):
    for col in xrange(row+1):
        a[row][col] += max(a[row+1][col], a[row+1][col+1])
print a[0][0]
[/code]